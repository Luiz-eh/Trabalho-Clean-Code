NOMES: Luiz Eduardo Hackbart e Gustavo Luiz da Silva


Nomes Significativos

Tudo em nossos códigos tem um nome, por isso escolha bem e não saia dando nomes vem sentido

Use nomes que revelem seu propósito 

Os nomes dados as variáveis, funções e classes devem ser explicativos, de forma que ao ler o código já 
saibamos para que serve, evitando comentários para explicar o código.

Variáveis como: essas devem ser evitadas, pois não dão a mínima ideia do que fazem ou de onde usa-las

Int count;
Int n1;
Int d;
Int m1;

Podem ser citados como exemplo de bons nomes como:

Int tempoDecorridoEmDias;
String nomeCopletoDoCliente;
Int diasDesdeCriacao;

Ao ler já é perceptível o propósito da variável


Por exemplo tente ler e dizer para que serve esse código:

Você diria que é um pedaço de código de um jogo campo minado?

public List<int[]> getThem(){
		List<int[]> list1 = new ArrayList<int[]>();
		for (int[] x : theList)
			if (x[0] == 4)
				list1.add(x);
		return list1;
}

Acho que não?


Mas se reformularmos esse código e mudarmos os nomes

public List<Casa> getMarcarCasas (){
	List<Casa> marcarCasas = new arrayList<Casa>();
	for (Casa casa : tabuleiro())
		marcarCasas.add(casa);
	return marcarCasas;}
}}}
	
Já é muito mais fácil de interpreta-lo.


É importante evitar usar palavras muito parecidas como por exemplo esses módulos:

 controladorParaManuseioEficienteDeStrings
 controladorParaArmazenamentoEficienteDeStrings

Pois hoje os ambientes de desenvolvimento contam com a facilidade da alto completar palavras, e se os nomes forem muito parecidos pode geral confusão no código.

É importante usar nomes pronunciáveis pois a programação é uma atividade social,
por exemplo quando você estiver discutindo som um colega de trabelho sobre um código e falam da variável

genymdhms (generetion, date, year, month, day, hour, minute e second) 

Todos vão parecer idiotas enquanto discutem, e isso é evitado simplesmente
com um nome melhor como "generationTimestamp"

Usar nomes passíveis de busca por exemplo se tiver uma variável com o nome de “e”,
se perderia muito facilmente em meio ao código, seria mais difícil o entendimento se
fosse um nome longo que se sobressai entre meio ao código, por exemplo comparando os dos códigos a baixo 

for (int j = 0; j<34; j++) {
		s += (t[j]*4)/5;

int DiasReaisPorDiaIdeal = 4;
	const int DIAS_DE_TRABALHO_POR_SEMANA = 5;
	int sum = 0;
	for (int j=0; j < NÚMERO_DE_TAREFAS; J++) {
		int diasTrabalhados = estimativaDeTarefa[j] * DiasReaisPorDiaIdeal;

		int semanasTrabalhados = (diasReais / DIAS_DE_TRABALHO_POR_SEMANA);
		sum += semanasDeTarefasReais;

	}

São códigos que fazem a mesma coisa, porém o segundo é muito mais legível.
Não necessariamente é mais rápido ou mais fácil de ser feito, porem o entendimento
do código por quem precisar lê-lo será muito mais fácil. 


Evite codificações no seu código, o uso de nomes que só você sabe o que significa é antiprofissional,
pois isso só trará problemas para outras pessoas que precisarem ler seu código.

Foi-se o tempo em que os programadores tinham que abreviar nomes de variáveis por limitações de hardware,
então hoje temos o privilegio e a obrigação de criar bons nomes sem ter que economizar palavras.
 

Classes devem ter nomes com substantivos, como Cliente, Conta, AnaliseEndereco,
deve-se evitar nomes como Gerente, Processador ou Info, e também deve-se evitar verbos.

private int Conta;
private String Cliente;
private String AnaliseEndereco;


Os nomes de métodos devem ter verbos como postarPagemento, excluirPagina, e seus métodos de acesso devem ter como prefixo get, set ou is.

	public String getPostaPagamento() {
		return PostaPagemento;
	}

	public void setPostaPagemento(String agencia) {
		this. PostaPagemento = agencia;

	if (contracheque.isPostado())...



	
Não use gírias ou piadas como nomes de variáveis, seja profissional e crie nomes com clareza,
um nome que queira dizer exatamente o que faz. 


Selecione uma palavra por conceito 

	
Deve-se evitar palavra iguais para dois propósitos, por exemplo, se temos muitas classes com add
que criara um novo por meio da adição e concatenação de dois valores existentes,
agora digamos que estamos criando uma nova classe que contenha um método que
coloque seu único parâmetro em uma coleção, por conta da semântica ser diferente
é mais adequado não usarmos add novamente e sim usar inserir ou adicionar.


Use nomes que deem um contexto significativos a uma função, usar nomes que
façam parte do contexto para o leitor, ou até mesmo usar prefixos nos nomes,
como lastName, street, ou com prefixo addLastName e addStreet



FUNÇÕES

A primeira regra para funções é que elas devem ser pequenas

BLOCOS E IDENTAÇÃO 

Aqui quero dizer que blocos dentro de instruções if, else, while e outros devem ter apenas uma linha.
Possivelmente uma chamada de função. Além de manter a função pequena, isso adiciona um valor significativo,
pois a função chamada de dentro do bloco pode receber um nome descritivo.
Isso também implica que as funções não devem ser grandes e ter estruturas alinhadas.  


Ex:    if (opção == 1) {
              saque := ( Valor do saque )
              if ( saldo >= saque) {
                   saldo := (saldo - saque)
                   fmt.Println(“saque realizado com sucesso”)
                   fmt.Println (“seu saldo é”, saldo)
              } else {
                   print (“saldo inexistente”) 
              }
         } else if (opção == 2) {
                deposito := (Valor de depósito)
                     if(deposito > 0) {
                           saldo := (deposito + saldo)
                           fmt.Println ('deposito realizado com sucesso')
                           fmt.Println ('seu saldo é', saldo)
                     }
         }




Refatorando:
if (opção == 1) {
       Sacar() 
} else if (opção == 2) {
       Depositar()
}



 func Sacar() {
      saque := ( Valor do saque )
      if ( saldo >= saque) {
            saldo := (saldo - saque)
            fmt.Println(“saque realizado com sucesso”)
            fmt.Println (“seu saldo é”, saldo)
      } else {
            print (“saldo inexistente”) 
      }
 }

func Depositar() {
deposito := (Valor de depósito)
if(deposito > 0) {
        saldo := (deposito + saldo)
        fmt.Println ('deposito realizado com sucesso')
        fmt.Println ('seu saldo é', saldo)
}
}


LEITURA DO CÓDIGO

Queremos que o código seja lido de cima para baixo, como uma narrativa.
Desejamos que cada função seja seguida pelas outras no próximo nível de modo que possamos
ler o programa descendo um nível de cada vez conforme percorremos a lista de funções.
Chamamos isso de Regra Decrescente.

ESTRUTURA SWITCH

É difícil criar uma estrutura switch pequenas, pois mesmo uma com apenas dois cases
é maior do que eu gostaria que fosse um bloco ou uma função. Também é difícil construir uma que fala apenas uma coisa.
Por padrão, as estruturas switch sempre fazem N coisas. Infelizmente, nem sempre conseguimos evitar o uso do switch

USE NOMES DESCRITIVOS

Pois descreve o que a função faz
Não tenha medo de criar nomes extensos, pois eles são melhores do que um pequeno e enigmático.
Um nome longo e descritivo é melhor do que um comentário extenso e descritivo.
Use uma convenção de nomenclatura que possibilite uma fácil leitura de nomes de funções com várias palavras e, então,
use estas para dar à função um nome que explique o que ela faz.


Ex: func HabDesabCposCab(Valor Boolean)
      func HabilitarCabecalho(Valor Boolean)


PARÂMETROS DE FUNÇÕES
A quantidade ideal de parâmetros para uma função é zero (nulo). Depois vem um, seguido de dois (díade).
Sempre que possível devem-se evitar três parâmetros (tríade). Para mais de três deve-se ter um motivo muito especial.
Parâmetros são complicados. Eles requerem bastante conceito.


PARÂMETROS LÓGICOS

Esses parâmetros são feios. Passar um booleano para uma função certamente é uma prática honível,
pois ele complica imediatamente a assinatura do método, mostrando explicitamente que a função faz mais de uma coisa.
Ela faz uma coisa se o valor for verdadeiro, e outra se for falso!

EVITE EFEITOS COLATERAIS

Efeitos colaterais são mentiras. Sua função promete fazer apenas uma coisa,
mas ela também faz outras coisas escondida. Às vezes, ela fará alterações inesperadas nas variáveis de sua própria classe.
As vezes, ela adicionará as variáveis aos parâmetros passados à função ou às globais do sistema.
Em ambos os casos elas são "verdades" enganosas e prejudiciais, que geralmente resultam em acoplamentos temporários estranhos e dependências.

EVITE REPETIÇÕES

A duplicação é um problema, pois ela amontoa o código e serão necessárias quatro
modificações se o algoritmo mudar. Além de serem quatro oportunidades
para a omissão de um erro.
A duplicação pode ser a raiz de todo o mal no software. Muitos princípios e práticas têm
sido criados com a finalidade de controlá-la ou eliminá-la.


Função com o nome Errado  CarregarCodigoVeiculo seria o mais correto
func CarCodVeic(Transportadora int) int{ 
var (
     StringSQL string
)   
    StringSQL = "SELECT CODIGO_VEI FROM TB_VEICULO "
    StringSQL += " WHERE TRANSP_VEI= " + codigo 

result := SQLICampo(StringSQL)
    
return result 
}



